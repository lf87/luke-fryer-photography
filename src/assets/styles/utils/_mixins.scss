// Rem caculation and auto line height
@function calculate-rem($size) {
  $remSize: $size / 16px;
  @return #{$remSize}rem;
}

@mixin font-size($size, $line: $size * 1.5) {
  font-size: calculate-rem($size);
  line-height: calculate-rem($line);
}

// @include font-name
// List all weights here e.g. 400i, 400, 500, 700
@mixin font-name($weight: 400, $style: normal) {
  font-family: 'Google Font', serif;
  font-weight: $weight;
}

// @include font-smoothing
@mixin font-smoothing($value: antialiased) {
  @if $value==antialiased {
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
  } @else {
    -moz-osx-font-smoothing: auto;
    -webkit-font-smoothing: subpixel-antialiased;
  }
}

// @include remove-tap-highlight
@mixin remove-tap-highlight {
  outline: none;
  -webkit-tap-highlight-color: transparent;
}


// @include transition(transform opacity, 500ms, ease, 0s, true, true);
@mixin transition($properties: all, $duration: 200ms, $method: ease, $delay: 0ms, $willChange: false, $backFaceVisibility: false) {
  $value: ();
  $valueWillChange: ();
  @each $property in $properties {
    @if length($value) > 0 {
      $value: append($value, unquote(',') #{$property} $duration $method $delay);
      $valueWillChange: append($valueWillChange, unquote(',') #{$property});
    } @else {
      $value: append($value, #{$property} $duration $method $delay);
      $valueWillChange: append($valueWillChange, #{$property});
    }
  }
  transition: $value;
  @if $willChange {
    will-change: $valueWillChange;
  }
  @if $backFaceVisibility {
    backface-visibility: hidden;
  }
}

// @include responsive-ratio(16,9);
@mixin responsive-ratio($x, $y, $pseudo: false) {
  $padding: unquote(($y / $x) * 100 + '%');
  @if $pseudo {
    &::before {
      @include pseudo($pos: relative);
      padding-top: $padding;
      width: 100%;
    }
  } @else {
    padding-top: $padding;
  }
}

